require 'faker'
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe IngredientsController, type: :controller do

  let(:user) { FactoryBot.create(:user)}
  let(:recipe) {FactoryBot.create(:recipe, user: user)}
  # This should return the minimal set of attributes required to create a valid
  # Ingredient. As you add validations to Ingredient, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryBot.attributes_for(:ingredient)
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:ingredient, measure_id: -1)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # IngredientsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      ingredient = Ingredient.create! valid_attributes.merge({recipe_id: recipe.id})
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      let(:params) {
        {
          ingredient: {
            recipe_id: recipe.id,
            name: Faker::Food.ingredient,
            quantity: 9,
            measure_id: Measure.find_or_create_by!(name: "jolly", abbrev: "jol"),
          }
        }
      }
      it "creates a new Ingredient" do
        expect {
          post :create, params: params, session: valid_session
        }.to change(Ingredient, :count).by(1)
      end

      it "renders a JSON response with the new ingredient" do
        post :create, params: params, session: valid_session
        expect(response).to have_http_status(:created), response.body
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(ingredient_url(Ingredient.last))
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the new ingredient" do

        post :create, params: {ingredient: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end


  context "with ingredient" do
    let(:ingredient) {
      Ingredient.create! valid_attributes.merge({recipe_id: recipe.id})
    }

    describe "GET #show" do
      it "returns a success response" do
        get :show, params: {id: ingredient.to_param}, session: valid_session
        expect(response).to be_success
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          {name: 'new ingredient'}
        }

        it "updates the requested ingredient" do
          put :update, params: {id: ingredient.to_param, ingredient: new_attributes}, session: valid_session
          ingredient.reload
          expect(ingredient.name).to eq('new ingredient')
        end

        it "renders a JSON response with the ingredient" do
          put :update, params: {id: ingredient.to_param, ingredient: new_attributes}, session: valid_session
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to eq('application/json')
        end
      end

      context "with invalid params" do
        it "renders a JSON response with errors for the ingredient" do
          put :update, params: {id: ingredient.to_param, ingredient: invalid_attributes}, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json')
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested ingredient" do
        ingredient # to hydrate the ingredient outside the expect block
        expect {
          delete :destroy, params: {id: ingredient.to_param}, session: valid_session
        }.to change(Ingredient, :count).by(-1)
      end
    end
  end
end
